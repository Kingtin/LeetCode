struct ListNode{
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
};
//递归
//ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
//    if (l1 == nullptr)return l2;
//    if (l2 == nullptr)return l1;
//    if (l1->val < l2->val) 
//    {
//        l1->next = mergeTwoLists(l1->next, l2);
//        return l1;
//    }
//    else
//    {
//        l2->next = mergeTwoLists(l1, l2->next);
//        return l2;
//    }
//}

//非递归，直接遍历
ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    if (l1 == nullptr)return l2;
    if (l2 == nullptr)return l1;
    ListNode* head = new ListNode;
    ListNode* res = head;
    while (l1 != NULL && l2 != NULL) 
    {
        if (l1->val < l2->val) {
            res->next = l1;
            l1 = l1->next;
        }
        else 
        {
            res->next = l2;
            l2 = l2->next;
        }
        res = res->next;
    }
    if (l1 == NULL)res->next = l2;
    if (l2 == NULL)res->next = l1;
    return head->next;
}
